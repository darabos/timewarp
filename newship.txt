(A guide to making new ships for Star Control: TimeWarp)
(this is a little out of date...)
(also, there's another guide to writting ships at this address:
http://www.richardyzo.hpg.com.br/timewarp/tutorial/index.html )

Sorry this took so long to get done but I deleted it once by mistake.
To do this properly one must have good C++ understanding, if you don't,
well don't even try this.

STEP 1: INSTALLATION

To start out you need a compiler for C++, my suggestion are VC++ if you want
to do a windows build, and have it.  If you don't I suggest DJGPP, because if
it works in that it will work in VC++.  Since I don't have VC++ this FAQ will
only explain it from DJGPP standpoint.  The first this to do is to install
DJGPP, get rhide editor with it.  Install it using the install instruction.
Don't forget to include your PATH and ENV lines in you config.sys.

Next you will need the following package to go with the compiler.  Allegro
(get the latest beta version) AASTR, and JGMOD.  Goto to the DJGPP site and
there should be links to all.  For AASTR and JGMOD no assembly required.
Just put in your DJGPP directory and go.  For Allegro though you will have
to build it.  Just run the makefile include with it and it will handle the
rest.  You should get some sample programs with it.  Go ahead and try them
out.

(more detailed installation instructions for DJGPP, Allegro, and related
packages are included in the file djgpp.txt)

STEP 2: PACKAGING

Now, you have to make a perimalary version of Star Control Melee,  First
create a project in RHIDE.  Add all the .cpp files to this,  make sure you
have all of them and no .h or other files.  Then make sure to include the .h
directories in the include line under the directory pull down.  This include
directories for allegro,JGmod,and AASTR.  Also make sure to include -lalleg
in the library windows.  At this point it should compile.  (Hopefully)

STEP 3: DESIGN

Now comes the fun part, figure out what you want to do with your ship.  One
thing is to remeber the constrants of the code.  Try not to do anything to
wild to start out.  Think about the current ships already in timewarp and
look at their code.  See what you like, what is hard and what is easy.  For
the most basic ship type of ship see the terran destroyer or the earthling
crusier.  Experiment with the current ships.  Get to know the code etc.  One
thing to note thought is due to the fact that some ships where made at
different times look at several examples.  Take for example the collisions.
You can allow turn off collisons using a flag for types of collison or edit
the canCollide function.  Thus look at many example to find the best way of
doing things.

STEP 4: CODING

Like every program (or fragment thereof) you eventually have to come down to
out it into code.  So if you don't know how to program in C++, go learn
because you've hit the end of the road, else keep reading.  First thing you
should do is rip the starting code from another ship...  This will give you
a skeleton to work from.  It should contain the ship class and one or more
weapons.  Below is a listing of functions that one could use and what each
contains:

calculate  Returns void

This is used for anthing that need constant updating.  Make sure you class
the parent of this class because it control the batt recharge, the ship
sprite, the weapon and special recharge, ship controls, hotspots, and
gravity.  In older version you would update by one but in the newer there is
a delay that you should add called frame_time It will be between 1 and 50 ms.

animate  Returns void
This function draws the current frame.

handle_damage  Returns void

This calculates fuel sapage, speed loss, damage (stuff that has to go
through sheild etc), direct damage (stuff that hits no mater what), and
repairs.

calculate_(five controls) returns void

This checks to see if you can use these controls.  The fire and special
checks recharge rate and energy usage.

activate_weapon (special) returns int

This actual creates the weapon and returns the true or false.

can_Collide Return int

Send you a pointer then you find out wither you can hit it.  Return a true
or false.  There is also a flags that can be set to determine classes that
can hit our not.


This list is not complete but should give you most of the function you will
need.  Look in mship.cpp and mcbodies.cpp for the rest and other details.
Now lets look at weapon, there are five types of weapons in SCTW.  They are:

Laser :Straight line for a certain time.

Shot : sprite weapon with only one frame.

Animate Shot : sprite weapon with multi frames.  Changes frame after time
delay.

Missle : sprite weapon with multi frames.  Changes frame using facing
direction.

HomingMissle : simular to missle except homes (DUH)

With all of these items the most important functions are calculate, animate, 
can_Collide, and handle_damage.  Also when you create a weapon, don't forget 
to include in the spaceFrame otherwise it won't be updated.  

Step 5 : DEBUGGING

This is your last step, the only piece of advise is that if it crashes to
the DOS prompt, I find that it is usually caused by incorrectly accessing
the sprites in the .dat file.  Hope this helps, and have fun.

